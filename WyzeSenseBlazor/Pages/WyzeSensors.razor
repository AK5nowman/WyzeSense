@page "/wyzesensors"

@using WyzeSenseBlazor.DataServices
@using WyzeSenseCore
@using AntDesign
@using System.Diagnostics
@using WyzeSenseBlazor.DataStorage.Models
@inject IWyzeSenseService SensorService
@inject DrawerService DrawerService

<h3>Wyze</h3>
@if (dongle == null)
{
    <Spin />
}
else
{
    <Descriptions Title="Dongle" Bordered Column="@columnNumber" Size="small">
        <DescriptionsItem Title="MAC">@dongle.MAC</DescriptionsItem>
        <DescriptionsItem Title="Status">
            @if (dongle.IsInclusive)
            {
                <Badge Status="warning" Text="Inclusion" />
            }
            else if (dongle.LEDState)
            {
                <Badge Status="processing" Text="Running" />
            }
            else
            {
                <Badge Status="default" Text="Running" />
            }
        </DescriptionsItem>
        <DescriptionsItem Title="Device Type">@dongle.DeviceType</DescriptionsItem>
        <DescriptionsItem Title="Auth State">@dongle.AuthState</DescriptionsItem>
        <DescriptionsItem Title="Version" Span="2">@dongle.Version</DescriptionsItem>
        <DescriptionsItem Title="LED" Span="1">
            <AntDesign.Switch Checked="true" OnChange="(state)=> { if (state) SensorService.SetLEDOn(); else SensorService.SetLEDOff(); }">
                <CheckedChildrenTemplate>
                    <Icon Type="bulb" Theme="outline" />
                </CheckedChildrenTemplate>
                <UnCheckedChildrenTemplate>
                    <Icon Type="bulb" Theme="fill" />
                </UnCheckedChildrenTemplate>
            </AntDesign.Switch>
        </DescriptionsItem>
        <DescriptionsItem Title="Inclusion" Span="1">
            @if (!dongle.IsInclusive)
            {
                <Button type="primary" OnClick="_=> SensorService.StartScanAsync()">Start</Button>
            }
            else
            {
                <Button type="primary" OnClick="_=> SensorService.StopScanAsync()" Danger>Stop</Button>
            }
        </DescriptionsItem>
    </Descriptions>
}

@if (sensorCollection == null)
{
    <Spin />
}
else
{
    <Table Title="Sensors" TItem="WyzeSensorModel" DataSource="sensorCollection.Values.ToArray()">
        <RowTemplate Context="sensorContext">
            <Column @bind-Field="@sensorContext.MAC" />
            <Column @bind-Field="@sensorContext.Alias" />
            @if (sensorContext.LastActive == DateTime.MinValue)
            {
                <Column @bind-Field="@sensorContext.LastActive">-</Column>
            }
            else
            {
                <Column @bind-Field="@sensorContext.LastActive" />
            }
            <Column @bind-Field="@sensorContext.Description" />
            <Column @bind-Field="@sensorContext.SensorType" />
            <ActionColumn>
                <Button Type="button" Icon="edit" Size="small" OnClick="_=>OpenDrawer(sensorContext.MAC)" />
                <Popconfirm Title="Sure to delete?" OnConfirm="_=>SensorDelete(sensorContext.MAC)" OkText="Yes" CancelText="No">
                    <Button Type="primary" Icon="delete" Size="small" Danger />
                </Popconfirm>
            </ActionColumn>
        </RowTemplate>
    </Table>
}

@code {
    private Dictionary<string, int> columnNumber = new Dictionary<string, int> {
            { "xxl", 3 },
            { "xl", 3},
            { "lg", 2},
            { "md", 2},
            { "sm", 1},
            { "xs", 1}
        };

    private Dictionary<string, WyzeSensorModel> sensorCollection;
    private WyzeDongleState dongle;
    string mac = "AABBCCDD";

    protected override async Task OnInitializedAsync()
    {
        sensorCollection = new();

        dongle = SensorService.GetDongleState();
        this.SensorService.OnEvent += OnSensorAlarm;
        this.SensorService.OnDongleStateChange += OnDongleStateChange;
        SensorService.OnAddSensor += OnAddSensor;
        SensorService.OnRemoveSensor += OnRemoveSensor;

        var sensors = await SensorService.GetSensorAsync();
        foreach (var sensor in sensors)
        {
            sensorCollection.TryAdd(sensor.MAC, sensor);

        }
        Console.WriteLine("Testing");

    }
    private async void OnRemoveSensor(object sender, string sensorMAC)
    {
        sensorCollection.Remove(sensorMAC);
        await InvokeAsync(this.StateHasChanged);
    }
    private async void OnAddSensor(object sender, WyzeSensorModel sensor)
    {
        sensorCollection.Add(sensor.MAC, sensor);
        await InvokeAsync(this.StateHasChanged);
    }
    private async void OnSensorAlarm(object sender, WyzeSenseEvent wyzeEvent)
    {
        await InvokeAsync(this.StateHasChanged);
    }

    private async void SensorDelete(string MAC)
    {

        Console.Write("Teststsett");
        //await SensorService.RequestDeleteSensor(MAC);
    }

    private async void OnDongleStateChange(object sender, WyzeDongleState state)
    {
        Console.WriteLine("Received dongle state:" + state);
        dongle = state;
        await InvokeAsync(this.StateHasChanged);
    }
    private void OnLEDSwitchChange(bool newState)
    {
        Console.WriteLine("New state:" + newState);
    }

    private async Task OpenDrawer(string MAC)
    {
        var options = new DrawerOptions()
        {
            Title = "Edit Sensor",
            Width = 350
        };
        Console.WriteLine("Test");
        var result = await DrawerService.CreateAsync<WyzeSenseBlazor.Component.WyzeSensor, WyzeSensorModel, WyzeSensorModel>(options, sensorCollection[MAC]);
    }

}
