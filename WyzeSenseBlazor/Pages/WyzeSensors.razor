@page "/wyzesensors"

@using WyzeSenseBlazor.DataServices
@using WyzeSenseCore
@using AntDesign
@using WyzeSenseBlazor.DatabaseProvider.Models
@inject IWyzeSenseService SensorService

<h3>Wyze</h3>
@if (dongle == null)
{
    <Spin />
}
else
{
    <Descriptions Title="Dongle" Bordered Column="@columnNumber" Size="small">
        <DescriptionsItem Title="MAC">@dongle.MAC</DescriptionsItem>
        <DescriptionsItem Title="Status">
            @if (dongle.IsInclusive)
            {
                <Badge Status="warning" Text="Inclusion" />
            }
            else if (dongle.LEDState)
            {
                <Badge Status="processing" Text="Running" />
            }
            else
            {
                <Badge Status="default" Text="Running" />
            }
        </DescriptionsItem>
        <DescriptionsItem Title="Device Type">@dongle.DeviceType</DescriptionsItem>
        <DescriptionsItem Title="Auth State">@dongle.AuthState</DescriptionsItem>
        <DescriptionsItem Title="Version" Span="2">@dongle.Version</DescriptionsItem>
        <DescriptionsItem Title="Action" Span="2">
            <Tooltip Title=@("LED")>
                <Switch Checked="true" OnChange="(state)=> { if (state) SensorService.SetLEDOn(); else SensorService.SetLEDOff(); }">
                    <CheckedChildrenTemplate>
                        <Icon Type="bulb" Theme="outline" />
                    </CheckedChildrenTemplate>
                    <UnCheckedChildrenTemplate>
                        <Icon Type="bulb" Theme="fill" />
                    </UnCheckedChildrenTemplate>
                </Switch>
            </Tooltip>
        </DescriptionsItem>
    </Descriptions>
}

@if (sensorCollection == null)
{
    <Spin />
}
else
{

    <Table Title="Sensors" TItem="WyzeSensorModel" DataSource="sensorCollection.Values.ToArray()" RowExpandable="@((record)=> record.Data.Events.Count() > 0)">
        <RowTemplate Context="sensorContext">
            <Column @bind-Field="@sensorContext.MAC" />
            @if (sensorContext.LastActive == DateTime.MinValue)
            {
                <Column @bind-Field="@sensorContext.LastActive">-</Column>
            }
            else
            {
                <Column @bind-Field="@sensorContext.LastActive" />
            }
            <ActionColumn>
                <Popconfirm Title="Sure to delete?" OnConfirm="()=>OnSensorDelete(sensorContext.MAC)" OkText="Yes" CancelText="No">
                    <Button Type="primary" Icon="delete" Size="small" Danger />
                </Popconfirm>
            </ActionColumn>
        </RowTemplate>
        <ExpandTemplate>
    <Table Title="Events" TItem="WyzeEventModel" DataSource="@context.Data.Events">
        <RowTemplate Context="eventContext">
            <Column @bind-Field="@eventContext.Time" />
            <Column Title="Type" TData="string">@eventContext.EventType.Type</Column>
            <Column Title="State" TData="string">
                @{  
                    var color = eventContext.State.Abnormal ? "red" : "green";
                    <Tag Color="@color">@eventContext.State.Type</Tag>
                    }
            </Column>
            <Column @bind-Field="@eventContext.Battery" />
            <Column @bind-Field="@eventContext.Signal" />
            <Column @bind-Field="@eventContext.EventId" />
        </RowTemplate>
    </Table>

        </ExpandTemplate>
    </Table>
}

@code {
    private Dictionary<string, int> columnNumber = new Dictionary<string, int> {
            { "xxl", 3 },
            { "xl", 3},
            { "lg", 2},
            { "md", 2},
            { "sm", 1},
            { "xs", 1}
        };

    private Dictionary<string, WyzeSensorModel> sensorCollection;
    private WyzeDongleState dongle;

    protected override async Task OnInitializedAsync()
    {
        sensorCollection = new();

        dongle = SensorService.GetDongleState();
        this.SensorService.OnSensorAlarm += OnSensorAlarm;
        this.SensorService.OnDongleStateChange += OnDongleStateChange;
        SensorService.OnAddSensor += OnAddSensor;
        SensorService.OnRemoveSensor += OnRemoveSensor;

        var sensors = await SensorService.GetSensorAsync();
        foreach (var sensor in sensors)
        {
            sensorCollection.TryAdd(sensor.MAC, sensor);

        }

    }
    private async void OnRemoveSensor(object sender, string sensorMAC)
    {
        sensorCollection.Remove(sensorMAC);
        await InvokeAsync(this.StateHasChanged);
    }
    private async void OnAddSensor(object sender, WyzeSensorModel sensor)
    {
        sensorCollection.Add(sensor.MAC, sensor);
        await InvokeAsync(this.StateHasChanged);
    }
    private async void OnSensorAlarm(object sender, WyzeEventModel wyzeEvent)
    {
        if (sensorCollection.TryGetValue(wyzeEvent.Sensor.MAC, out var sensor))
        {
            sensor.Events.Add(wyzeEvent);
        }
        await InvokeAsync(this.StateHasChanged);
    }

    private async void OnSensorDelete(string MAC)
    {
        await SensorService.RequestDeleteSensor(MAC);
    }

    private async void OnDongleStateChange(object sender, WyzeDongleState state)
    {
        Console.WriteLine("Received dongle state:" + state);
        dongle = state;
        await InvokeAsync(this.StateHasChanged);
    }
    private void OnLEDSwitchChange(bool newState)
    {
        Console.WriteLine("New state:" + newState);
    }

}
