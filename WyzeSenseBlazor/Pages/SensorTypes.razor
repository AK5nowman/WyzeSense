@page "/sensortypes"

@using WyzeSenseBlazor.DataServices
@using WyzeSenseCore
@using AntDesign
@using WyzeSenseBlazor.DatabaseProvider.Models
@inject ISensorTypeService sensorTypeService;

<h3>Sensor Types</h3>

<Table TItem="WyzeSensorTypeModel" DataSource="@sensorTypes" PageSize="@pageSize" RowClassName="@(_=>"editable-row")">
    <RowTemplate>
        <Column @bind-Field="@context.Id" />
        <Column DataIndex="@nameof(context.Type)" TData="string">
            @if (editSensorModelId == context.Id)
            {
                <Input Type="text" @bind-Value="context.Type" OnBlur="()=>stopSensorEdit(context)" AutoFocus />
            }
            else
            {
                <div class="editable-cell-value-wrap" style="padding-right:24px" @onclick="()=>startSensorEdit(context.Id)">
                    @context.Type
                </div>
            }
        </Column>
    </RowTemplate>
    <ExpandTemplate>
        <Table TItem="WyzeSensorStateModel" DataSource="@context.Data.States" RowClassName="@(_=>"editable-row")">
            <RowTemplate Context="stateContext">
                <Column @bind-Field="@stateContext.State" />
                <Column DataIndex="@nameof(stateContext.Type)" TData="string">
                    @if (editStateModelId == stateContext.Id)
                    {
                        <Input Type="text" @bind-Value="stateContext.Type" OnBlur="() => stopStateEdit(stateContext)" AutoFocus />
                    }
                    else
                    {
                        <div class="editable-cell-value-wrap" style="padding-right:24px" @onclick="()=>startStateEdit(stateContext.Id)">
                            @{ var color = stateContext.Abnormal ? "red" : "green";
                            <Tag Color="@color">
                                @stateContext.Type
                            </Tag>
                                }
                        </div>
                    }
                </Column>
                <Column @bind-Field="@stateContext.Abnormal">
                    <Checkbox @bind-value="@stateContext.Abnormal" CheckedChange="(value)=> stateAbnormalChange(stateContext)" />
                </Column>
            </RowTemplate>
        </Table>
    </ExpandTemplate>
</Table>
<style>
    .editable-cell {
        position: relative;
    }

    .editable-cell-value-wrap {
        padding: 5px 12px;
        cursor: pointer;
    }

    .editable-row:hover .editable-cell-value-wrap {
        padding: 4px 11px;
        border: 1px solid #d9d9d9;
        border-radius: 4px;
    }

    [data-theme='dark'] .editable-row:hover .editable-cell-value-wrap {
        border: 1px solid #434343;
    }
</style>
@code {
    int editSensorModelId;
    int editStateModelId;

    List<WyzeSensorTypeModel> sensorTypes;

    public int pageSize { get; set; } = 10;

    protected override async Task OnInitializedAsync()
    {
        sensorTypes = new();
        sensorTypes.AddRange(await sensorTypeService.GetSensorTypesAsync());

    }
    void startSensorEdit(int Id)
    {
        editSensorModelId = Id;
    }

    async void stopSensorEdit(WyzeSensorTypeModel newModel)
    {
        await sensorTypeService.UpdateSensorTypeAsync(newModel);
        editSensorModelId = -1;
    }

    void startStateEdit(int Id)
    {
        editStateModelId = Id;
    }

    async void stopStateEdit(WyzeSensorStateModel newModel)
    {
        await sensorTypeService.UpdateStateAsync(newModel);
        editStateModelId = -1;
    }
    async void stateAbnormalChange(WyzeSensorStateModel newModel)
    {
        await sensorTypeService.UpdateStateAsync(newModel);
    }
}
